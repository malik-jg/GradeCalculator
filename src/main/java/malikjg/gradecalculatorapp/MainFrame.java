/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package malikjg.gradecalculatorapp;

import java.sql.*;
import javax.swing.*;
import java.util.Set;
import java.util.HashSet;
import java.awt.event.*;
import java.awt.*;
/**
 *
 * @author milky
 */
public class MainFrame extends JFrame {
    
    
    private Connection connection;
    private String databaseURL = "jdbc:derby:C:/Users/milky/DerbyDB/gradecalc";
    private PreparedStatement preparedStatement;
    private Statement statement;
    private ResultSet rs;
    private boolean userExists;
    UserProfile user;
    private Classes currentClass;
    private String currentClassName;
    private Assignment currentAssignment;

    private JButton addButton;
    private JButton addClassButton;
    private JTextField categoryInput;
    private JLabel categoryLabel;
    private JList<String> categoryList;
    private JScrollPane categoryScrollPanel;
    private JList<String> classList;
    private JLabel classListLabel;
    private JScrollPane classListScrollPanel;
    private JTextField classNameField;
    private JTextArea editAddClassGradeDisplayText;
    private JLabel editAddClassGradeLabel;
    private JPanel editAddClassScreen;
    private JButton editAddGoBack;
    private JButton editClassButton;
    private JLabel gpaLabel;
    private JTextField gradeInput;
    private JLabel gradeLabel;
    private JList<String> gradeList;
    private JScrollPane gradeScrollPanel;
    private JPanel homeScreen;
    private JButton inEnterButton;
    private JButton inGoBack;
    private JPasswordField inPasswordField;
    private JLabel inPasswordLabel;
    private JTextField inUsernameField;
    private JLabel inUsernameLabel;
    private JButton removeButton;
    private JButton removeClassButton;
    private JButton signinButton;
    private JPanel signinScreen;
    private JLabel signinTitle;
    private JButton signoutButton;
    private JButton signupButton;
    private JPanel signupScreen;
    private JLabel sigupTitle;
    private JButton upGoBack;
    private JTextField upNameField;
    private JLabel upNameLabel;
    private JPasswordField upPasswordField;
    private JLabel upPasswordLabel;
    private JButton upRegisterButton;
    private JTextField upUsernameField;
    private JLabel upUsernameLabel;
    private JButton updateButton;
    private JTextField weightInput;
    private JLabel weightLabel;
    private JList<String> weightList;
    private JScrollPane weightScrollPanel;
    private JLabel welcomeNameLabel;
    private JPanel welcomeScreen;
    private JLabel welcomeTitle;

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        GridBagConstraints gridBagConstraints;

        welcomeScreen = new JPanel();
        welcomeTitle = new JLabel();
        signinButton = new JButton();
        signupButton = new JButton();
        signinScreen = new JPanel();
        inUsernameLabel = new JLabel();
        inPasswordLabel = new JLabel();
        inUsernameField = new JTextField();
        inPasswordField = new JPasswordField();
        inEnterButton = new JButton();
        signinTitle = new JLabel();
        inGoBack = new JButton();
        signupScreen = new JPanel();
        upNameLabel = new JLabel();
        upNameField = new JTextField();
        upUsernameLabel = new JLabel();
        upUsernameField = new JTextField();
        upPasswordLabel = new JLabel();
        upPasswordField = new JPasswordField();
        upRegisterButton = new JButton();
        sigupTitle = new JLabel();
        upGoBack = new JButton();
        homeScreen = new JPanel();
        welcomeNameLabel = new JLabel();
        gpaLabel = new JLabel();
        classListLabel = new JLabel();
        classListScrollPanel = new JScrollPane();
        classList = new JList<>();
        signoutButton = new JButton();
        editClassButton = new JButton();
        classNameField = new JTextField();
        addClassButton = new JButton();
        removeClassButton = new JButton();
        editAddClassScreen = new JPanel();
        categoryLabel = new JLabel();
        categoryInput = new JTextField();
        categoryScrollPanel = new JScrollPane();
        categoryList = new JList<>();
        addButton = new JButton();
        removeButton = new JButton();
        gradeLabel = new JLabel();
        gradeInput = new JTextField();
        gradeScrollPanel = new JScrollPane();
        gradeList = new JList<>();
        weightLabel = new JLabel();
        weightInput = new JTextField();
        weightScrollPanel = new JScrollPane();
        weightList = new JList<>();
        editAddClassGradeLabel = new JLabel();
        editAddClassGradeDisplayText = new JTextArea();
        editAddGoBack = new JButton();
        updateButton = new JButton();

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new Dimension(1280, 720));
        setMinimumSize(new Dimension(1280, 720));
        setResizable(false);
        getContentPane().setLayout(new CardLayout());

        welcomeScreen.setBackground(new Color(255, 204, 204));
        welcomeScreen.setMaximumSize(new Dimension(1280, 720));
        welcomeScreen.setMinimumSize(new Dimension(1280, 720));
        welcomeScreen.setPreferredSize(new Dimension(1280, 720));
        welcomeScreen.setLayout(new GridBagLayout());

        welcomeTitle.setFont(new Font("Georgia", 0, 96)); // NOI18N
        welcomeTitle.setForeground(new Color(0, 0, 0));
        welcomeTitle.setText("Grade Calculator");
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.ipady = 9;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new Insets(45, 15, 45, 15);
        welcomeScreen.add(welcomeTitle, gridBagConstraints);

        signinButton.setBackground(new Color(255, 255, 255));
        signinButton.setFont(new Font("Georgia", 0, 36)); // NOI18N
        signinButton.setForeground(new Color(0, 0, 0));
        signinButton.setText("Sign In");
        signinButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                signinButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weighty = 0.6;
        gridBagConstraints.insets = new Insets(39, 0, 29, 0);
        welcomeScreen.add(signinButton, gridBagConstraints);

        signupButton.setBackground(new Color(255, 255, 255));
        signupButton.setFont(new Font("Georgia", 0, 36)); // NOI18N
        signupButton.setForeground(new Color(0, 0, 0));
        signupButton.setText("Sign Up");
        signupButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                signupButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.weighty = 0.8;
        gridBagConstraints.insets = new Insets(0, 0, 18, 0);
        welcomeScreen.add(signupButton, gridBagConstraints);

        getContentPane().add(welcomeScreen, "card2");

        signinScreen.setBackground(new Color(255, 204, 204));
        signinScreen.setMaximumSize(new Dimension(1280, 720));
        signinScreen.setMinimumSize(new Dimension(1280, 720));
        signinScreen.setPreferredSize(new Dimension(1280, 720));
        signinScreen.setLayout(new GridBagLayout());

        inUsernameLabel.setBackground(new Color(255, 255, 255));
        inUsernameLabel.setFont(new Font("Georgia", 0, 48)); // NOI18N
        inUsernameLabel.setForeground(new Color(0, 0, 0));
        inUsernameLabel.setText("Username");
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new Insets(0, 0, 0, 32);
        signinScreen.add(inUsernameLabel, gridBagConstraints);

        inPasswordLabel.setBackground(new Color(255, 255, 255));
        inPasswordLabel.setFont(new Font("Georgia", 0, 48)); // NOI18N
        inPasswordLabel.setForeground(new Color(0, 0, 0));
        inPasswordLabel.setText("Password");
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new Insets(0, 0, 0, 29);
        signinScreen.add(inPasswordLabel, gridBagConstraints);

        inUsernameField.setBackground(new Color(255, 255, 255));
        inUsernameField.setFont(new Font("Georgia", 0, 24)); // NOI18N
        inUsernameField.setForeground(new Color(0, 0, 0));
        inUsernameField.setMaximumSize(new Dimension(256, 64));
        inUsernameField.setMinimumSize(new Dimension(256, 64));
        inUsernameField.setPreferredSize(new Dimension(256, 64));
        inUsernameField.setRequestFocusEnabled(true);
        inUsernameField.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                inUsernameFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.weighty = 0.3;
        gridBagConstraints.insets = new Insets(10, 0, 9, 0);
        signinScreen.add(inUsernameField, gridBagConstraints);

        inPasswordField.setBackground(new Color(255, 255, 255));
        inPasswordField.setFont(new Font("Georgia", 0, 24)); // NOI18N
        inPasswordField.setForeground(new Color(0, 0, 0));
        inPasswordField.setMaximumSize(new Dimension(256, 64));
        inPasswordField.setMinimumSize(new Dimension(256, 64));
        inPasswordField.setPreferredSize(new Dimension(256, 64));
        inPasswordField.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                inPasswordFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new Insets(0, 0, 6, 0);
        signinScreen.add(inPasswordField, gridBagConstraints);

        inEnterButton.setBackground(new Color(255, 255, 255));
        inEnterButton.setFont(new Font("Georgia", 0, 60)); // NOI18N
        inEnterButton.setForeground(new Color(0, 0, 0));
        inEnterButton.setText("Enter");
        inEnterButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                inEnterButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 8;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new Insets(3, 0, 3, 0);
        signinScreen.add(inEnterButton, gridBagConstraints);

        signinTitle.setBackground(new Color(255, 255, 255));
        signinTitle.setFont(new Font("Georgia", 0, 48)); // NOI18N
        signinTitle.setForeground(new Color(0, 0, 0));
        signinTitle.setText("Sign-In");
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.insets = new Insets(20, 0, 0, 0);
        signinScreen.add(signinTitle, gridBagConstraints);

        inGoBack.setBackground(new Color(255, 255, 255));
        inGoBack.setFont(new Font("Georgia", 0, 60)); // NOI18N
        inGoBack.setForeground(new Color(0, 0, 0));
        inGoBack.setText("Go Back");
        inGoBack.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                inGoBackActionPerformed(evt);
            }
        });
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 20;
        gridBagConstraints.gridwidth = 2;
        signinScreen.add(inGoBack, gridBagConstraints);

        getContentPane().add(signinScreen, "card3");

        signupScreen.setBackground(new Color(255, 204, 204));
        signupScreen.setMaximumSize(new Dimension(1280, 720));
        signupScreen.setMinimumSize(new Dimension(1280, 720));
        signupScreen.setPreferredSize(new Dimension(1280, 720));
        signupScreen.setLayout(new GridBagLayout());

        upNameLabel.setBackground(new Color(255, 255, 255));
        upNameLabel.setFont(new Font("Georgia", 0, 48)); // NOI18N
        upNameLabel.setForeground(new Color(0, 0, 0));
        upNameLabel.setText("Name");
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        signupScreen.add(upNameLabel, gridBagConstraints);

        upNameField.setBackground(new Color(255, 255, 255));
        upNameField.setFont(new Font("Georgia", 0, 24)); // NOI18N
        upNameField.setForeground(new Color(0, 0, 0));
        upNameField.setMaximumSize(new Dimension(256, 64));
        upNameField.setMinimumSize(new Dimension(256, 64));
        upNameField.setPreferredSize(new Dimension(256, 64));
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weighty = 0.3;
        gridBagConstraints.insets = new Insets(0, 33, 0, 0);
        signupScreen.add(upNameField, gridBagConstraints);

        upUsernameLabel.setBackground(new Color(255, 255, 255));
        upUsernameLabel.setFont(new Font("Georgia", 0, 48)); // NOI18N
        upUsernameLabel.setForeground(new Color(0, 0, 0));
        upUsernameLabel.setText("Username");
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        signupScreen.add(upUsernameLabel, gridBagConstraints);

        upUsernameField.setBackground(new Color(255, 255, 255));
        upUsernameField.setFont(new Font("Georgia", 0, 24)); // NOI18N
        upUsernameField.setForeground(new Color(0, 0, 0));
        upUsernameField.setMaximumSize(new Dimension(256, 64));
        upUsernameField.setMinimumSize(new Dimension(256, 64));
        upUsernameField.setPreferredSize(new Dimension(256, 64));
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.weighty = 0.4;
        gridBagConstraints.insets = new Insets(0, 33, 0, 0);
        signupScreen.add(upUsernameField, gridBagConstraints);

        upPasswordLabel.setBackground(new Color(255, 255, 255));
        upPasswordLabel.setFont(new Font("Georgia", 0, 48)); // NOI18N
        upPasswordLabel.setForeground(new Color(0, 0, 0));
        upPasswordLabel.setText("Password");
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        signupScreen.add(upPasswordLabel, gridBagConstraints);

        upPasswordField.setBackground(new Color(255, 255, 255));
        upPasswordField.setFont(new Font("Georgia", 0, 24)); // NOI18N
        upPasswordField.setForeground(new Color(0, 0, 0));
        upPasswordField.setMaximumSize(new Dimension(256, 64));
        upPasswordField.setMinimumSize(new Dimension(256, 64));
        upPasswordField.setPreferredSize(new Dimension(256, 64));
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.weighty = 0.5;
        gridBagConstraints.insets = new Insets(0, 33, 0, 0);
        signupScreen.add(upPasswordField, gridBagConstraints);

        upRegisterButton.setBackground(new Color(255, 255, 255));
        upRegisterButton.setFont(new Font("Georgia", 0, 60)); // NOI18N
        upRegisterButton.setForeground(new Color(0, 0, 0));
        upRegisterButton.setText("Register");
        upRegisterButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                upRegisterButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new Insets(0, 0, 36, 0);
        signupScreen.add(upRegisterButton, gridBagConstraints);

        sigupTitle.setBackground(new Color(255, 255, 255));
        sigupTitle.setFont(new Font("Georgia", 0, 48)); // NOI18N
        sigupTitle.setForeground(new Color(0, 0, 0));
        sigupTitle.setText("Sign-Up");
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.insets = new Insets(10, 0, 0, 0);
        signupScreen.add(sigupTitle, gridBagConstraints);

        upGoBack.setBackground(new Color(255, 255, 255));
        upGoBack.setFont(new Font("Georgia", 0, 60)); // NOI18N
        upGoBack.setForeground(new Color(0, 0, 0));
        upGoBack.setText("Go Back");
        upGoBack.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                upGoBackActionPerformed(evt);
            }
        });
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 4;
        signupScreen.add(upGoBack, gridBagConstraints);

        getContentPane().add(signupScreen, "card4");

        homeScreen.setBackground(new Color(255, 204, 204));
        homeScreen.setLayout(new GridBagLayout());

        welcomeNameLabel.setBackground(new Color(255, 255, 255));
        welcomeNameLabel.setFont(new Font("Georgia", 0, 36)); // NOI18N
        welcomeNameLabel.setForeground(new Color(0, 0, 0));
        welcomeNameLabel.setText("Welcome");
        welcomeNameLabel.setMaximumSize(new Dimension(512, 69));
        welcomeNameLabel.setMinimumSize(new Dimension(512, 69));
        welcomeNameLabel.setPreferredSize(new Dimension(512, 69));
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        homeScreen.add(welcomeNameLabel, gridBagConstraints);

        gpaLabel.setBackground(new Color(255, 255, 255));
        gpaLabel.setFont(new Font("Georgia", 0, 60)); // NOI18N
        gpaLabel.setForeground(new Color(0, 0, 0));
        gpaLabel.setText("GPA");
        gpaLabel.setMaximumSize(new Dimension(512, 69));
        gpaLabel.setMinimumSize(new Dimension(512, 69));
        gpaLabel.setPreferredSize(new Dimension(512, 69));
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        homeScreen.add(gpaLabel, gridBagConstraints);

        classListLabel.setBackground(new Color(255, 255, 255));
        classListLabel.setFont(new Font("Georgia", 0, 60)); // NOI18N
        classListLabel.setForeground(new Color(0, 0, 0));
        classListLabel.setText("Class List");
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new Insets(31, 0, 31, 0);
        homeScreen.add(classListLabel, gridBagConstraints);

        classListScrollPanel.setMaximumSize(new Dimension(256, 256));
        classListScrollPanel.setMinimumSize(new Dimension(256, 256));
        classListScrollPanel.setPreferredSize(new Dimension(256, 256));

        classList.setBackground(new Color(255, 255, 255));
        classList.setFont(new Font("Georgia", 0, 12)); // NOI18N
        classList.setForeground(new Color(0, 0, 0));
        classList.setMaximumSize(new Dimension(256, 256));
        classList.setMinimumSize(new Dimension(256, 256));
        classList.setPreferredSize(new Dimension(256, 256));
        classListScrollPanel.setViewportView(classList);

        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridheight = 3;
        homeScreen.add(classListScrollPanel, gridBagConstraints);

        signoutButton.setBackground(new Color(255, 255, 255));
        signoutButton.setFont(new Font("Georgia", 0, 48)); // NOI18N
        signoutButton.setForeground(new Color(0, 0, 0));
        signoutButton.setText("Sign Out");
        signoutButton.setMaximumSize(new Dimension(263, 90));
        signoutButton.setMinimumSize(new Dimension(263, 90));
        signoutButton.setPreferredSize(new Dimension(263, 90));
        signoutButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                signoutButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        homeScreen.add(signoutButton, gridBagConstraints);

        editClassButton.setBackground(new Color(255, 255, 255));
        editClassButton.setFont(new Font("Georgia", 0, 60)); // NOI18N
        editClassButton.setForeground(new Color(0, 0, 0));
        editClassButton.setText("Edit Class");
        editClassButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                editClassButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new Insets(9, 53, 62, 53);
        homeScreen.add(editClassButton, gridBagConstraints);

        classNameField.setBackground(new Color(255, 255, 255));
        classNameField.setFont(new Font("Georgia", 0, 18)); // NOI18N
        classNameField.setForeground(new Color(0, 0, 0));
        classNameField.setText("edit/add name");
        classNameField.setMaximumSize(new Dimension(256, 96));
        classNameField.setMinimumSize(new Dimension(256, 96));
        classNameField.setPreferredSize(new Dimension(256, 96));
        classNameField.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                classNameFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.insets = new Insets(0, 0, 34, 0);
        homeScreen.add(classNameField, gridBagConstraints);

        addClassButton.setBackground(new Color(255, 255, 255));
        addClassButton.setFont(new Font("Georgia", 0, 60)); // NOI18N
        addClassButton.setForeground(new Color(0, 0, 0));
        addClassButton.setText("Add Class");
        addClassButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                addClassButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        homeScreen.add(addClassButton, gridBagConstraints);

        removeClassButton.setBackground(new Color(255, 255, 255));
        removeClassButton.setFont(new Font("Georgia", 0, 60)); // NOI18N
        removeClassButton.setForeground(new Color(0, 0, 0));
        removeClassButton.setText("Remove Class");
        removeClassButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                removeClassButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new Insets(32, 0, 32, 0);
        homeScreen.add(removeClassButton, gridBagConstraints);

        getContentPane().add(homeScreen, "card6");

        editAddClassScreen.setBackground(new Color(255, 204, 204));
        editAddClassScreen.setMaximumSize(new Dimension(1280, 720));
        editAddClassScreen.setMinimumSize(new Dimension(1280, 720));
        editAddClassScreen.setPreferredSize(new Dimension(1280, 720));
        editAddClassScreen.setLayout(new GridBagLayout());

        categoryLabel.setBackground(new Color(255, 255, 255));
        categoryLabel.setFont(new Font("Georgia", 0, 48)); // NOI18N
        categoryLabel.setForeground(new Color(0, 0, 0));
        categoryLabel.setText("Category");
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new Insets(20, 0, 20, 0);
        editAddClassScreen.add(categoryLabel, gridBagConstraints);

        categoryInput.setBackground(new Color(255, 255, 255));
        categoryInput.setFont(new Font("Georgia", 0, 48)); // NOI18N
        categoryInput.setForeground(new Color(0, 0, 0));
        categoryInput.setMaximumSize(new Dimension(192, 64));
        categoryInput.setMinimumSize(new Dimension(192, 64));
        categoryInput.setPreferredSize(new Dimension(192, 64));
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridheight = 2;
        editAddClassScreen.add(categoryInput, gridBagConstraints);

        categoryScrollPanel.setMaximumSize(new Dimension(128, 256));
        categoryScrollPanel.setMinimumSize(new Dimension(128, 256));
        categoryScrollPanel.setPreferredSize(new Dimension(128, 256));

        categoryList.setBackground(new Color(255, 255, 255));
        categoryList.setFont(new Font("Georgia", 0, 14)); // NOI18N
        categoryList.setForeground(new Color(0, 0, 0));
        categoryList.setMaximumSize(new Dimension(128, 256));
        categoryList.setMinimumSize(new Dimension(128, 256));
        categoryList.setPreferredSize(new Dimension(128, 256));
        categoryScrollPanel.setViewportView(categoryList);

        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.insets = new Insets(10, 0, 10, 0);
        editAddClassScreen.add(categoryScrollPanel, gridBagConstraints);

        addButton.setBackground(new Color(255, 255, 255));
        addButton.setFont(new Font("Georgia", 0, 48)); // NOI18N
        addButton.setForeground(new Color(0, 0, 0));
        addButton.setText("Add");
        addButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new Insets(10, 0, 10, 0);
        editAddClassScreen.add(addButton, gridBagConstraints);

        removeButton.setBackground(new Color(255, 255, 255));
        removeButton.setFont(new Font("Georgia", 0, 48)); // NOI18N
        removeButton.setForeground(new Color(0, 0, 0));
        removeButton.setText("Remove");
        removeButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        editAddClassScreen.add(removeButton, gridBagConstraints);

        gradeLabel.setBackground(new Color(255, 255, 255));
        gradeLabel.setFont(new Font("Georgia", 0, 48)); // NOI18N
        gradeLabel.setForeground(new Color(0, 0, 0));
        gradeLabel.setText("Grade");
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.weightx = 0.1;
        editAddClassScreen.add(gradeLabel, gridBagConstraints);

        gradeInput.setBackground(new Color(255, 255, 255));
        gradeInput.setFont(new Font("Georgia", 0, 48)); // NOI18N
        gradeInput.setForeground(new Color(0, 0, 0));
        gradeInput.setMaximumSize(new Dimension(192, 64));
        gradeInput.setMinimumSize(new Dimension(192, 64));
        gradeInput.setPreferredSize(new Dimension(192, 64));
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridheight = 2;
        editAddClassScreen.add(gradeInput, gridBagConstraints);

        gradeScrollPanel.setMaximumSize(new Dimension(128, 256));
        gradeScrollPanel.setMinimumSize(new Dimension(128, 256));
        gradeScrollPanel.setPreferredSize(new Dimension(128, 256));

        gradeList.setBackground(new Color(255, 255, 255));
        gradeList.setFont(new Font("Georgia", 0, 14)); // NOI18N
        gradeList.setForeground(new Color(0, 0, 0));
        gradeList.setMaximumSize(new Dimension(128, 256));
        gradeList.setMinimumSize(new Dimension(128, 256));
        gradeList.setPreferredSize(new Dimension(128, 256));
        gradeScrollPanel.setViewportView(gradeList);

        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        editAddClassScreen.add(gradeScrollPanel, gridBagConstraints);

        weightLabel.setBackground(new Color(255, 255, 255));
        weightLabel.setFont(new Font("Georgia", 0, 48)); // NOI18N
        weightLabel.setForeground(new Color(0, 0, 0));
        weightLabel.setText("Weight");
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.weightx = 0.1;
        editAddClassScreen.add(weightLabel, gridBagConstraints);

        weightInput.setBackground(new Color(255, 255, 255));
        weightInput.setFont(new Font("Georgia", 0, 48)); // NOI18N
        weightInput.setForeground(new Color(0, 0, 0));
        weightInput.setMaximumSize(new Dimension(192, 64));
        weightInput.setMinimumSize(new Dimension(192, 64));
        weightInput.setOpaque(true);
        weightInput.setPreferredSize(new Dimension(192, 64));
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridheight = 2;
        editAddClassScreen.add(weightInput, gridBagConstraints);

        weightScrollPanel.setMaximumSize(new Dimension(128, 256));
        weightScrollPanel.setMinimumSize(new Dimension(128, 256));
        weightScrollPanel.setPreferredSize(new Dimension(128, 256));

        weightList.setBackground(new Color(255, 255, 255));
        weightList.setFont(new Font("Georgia", 0, 14)); // NOI18N
        weightList.setForeground(new Color(0, 0, 0));
        weightList.setMaximumSize(new Dimension(128, 256));
        weightList.setMinimumSize(new Dimension(128, 256));
        weightList.setPreferredSize(new Dimension(128, 256));
        weightScrollPanel.setViewportView(weightList);

        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        editAddClassScreen.add(weightScrollPanel, gridBagConstraints);

        editAddClassGradeLabel.setBackground(new Color(255, 204, 204));
        editAddClassGradeLabel.setFont(new Font("Georgia", 0, 40)); // NOI18N
        editAddClassGradeLabel.setForeground(new Color(0, 0, 0));
        editAddClassGradeLabel.setText("Class  Grade");
        editAddClassGradeLabel.setMaximumSize(new Dimension(256, 60));
        editAddClassGradeLabel.setMinimumSize(new Dimension(256, 60));
        editAddClassGradeLabel.setOpaque(true);
        editAddClassGradeLabel.setPreferredSize(new Dimension(256, 60));
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.weighty = 0.1;
        editAddClassScreen.add(editAddClassGradeLabel, gridBagConstraints);

        editAddClassGradeDisplayText.setEditable(false);
        editAddClassGradeDisplayText.setBackground(new Color(255, 255, 255));
        editAddClassGradeDisplayText.setColumns(20);
        editAddClassGradeDisplayText.setFont(new Font("Georgia", 0, 48)); // NOI18N
        editAddClassGradeDisplayText.setForeground(new Color(0, 0, 0));
        editAddClassGradeDisplayText.setRows(5);
        editAddClassGradeDisplayText.setText("0.00");
        editAddClassGradeDisplayText.setMaximumSize(new Dimension(256, 64));
        editAddClassGradeDisplayText.setMinimumSize(new Dimension(256, 64));
        editAddClassGradeDisplayText.setPreferredSize(new Dimension(256, 64));
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        editAddClassScreen.add(editAddClassGradeDisplayText, gridBagConstraints);

        editAddGoBack.setBackground(new Color(255, 255, 255));
        editAddGoBack.setFont(new Font("Georgia", 0, 60)); // NOI18N
        editAddGoBack.setForeground(new Color(0, 0, 0));
        editAddGoBack.setText("Go Back");
        editAddGoBack.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                editAddGoBackActionPerformed(evt);
            }
        });
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 7;
        editAddClassScreen.add(editAddGoBack, gridBagConstraints);

        updateButton.setBackground(new Color(255, 255, 255));
        updateButton.setFont(new Font("Georgia", 0, 60)); // NOI18N
        updateButton.setForeground(new Color(0, 0, 0));
        updateButton.setText("UPDATE");
        updateButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.insets = new Insets(0, 0, 0, 11);
        editAddClassScreen.add(updateButton, gridBagConstraints);

        getContentPane().add(editAddClassScreen, "card5");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void signinButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_signinButtonActionPerformed
        createLoginTable();
        welcomeScreen.setVisible(false);
        signinScreen.setVisible(true);
    }//GEN-LAST:event_signinButtonActionPerformed

    private void inEnterButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_inEnterButtonActionPerformed
        String username = inUsernameField.getText().trim();
        String password = inPasswordField.getText().trim();
        userExists = false;
        
        try{
            connection = DriverManager.getConnection(databaseURL);
            statement = connection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,  ResultSet.CONCUR_READ_ONLY);
            rs = statement.executeQuery("SELECT * FROM USERPASS");
            while(rs.next()){
                if(rs.getString("USERNAME").equals(username) && rs.getString("PASSWORD").equals(password)){
                    userExists = true;
                }
                if(rs.getString("USERNAME").equals(username) && !rs.getString("PASSWORD").equals(password)){
                    throw new IncorrectPassword();
                }
            }
            if(userExists){
                JOptionPane.showMessageDialog(this, "Successfully Signed-In");
                signinScreen.setVisible(false);
                homeScreen.setVisible(true);
                user = new UserProfile(username);
                welcomeNameLabel.setText("Welcome " + user.getUserName());
                getUserClasses(username);
                getUserAssignments(username);
                gpaLabel.setText("GPA: " + user.getGPA());
            }
            else{
                JOptionPane.showMessageDialog(this, "Cannot Find User " + username);
            }
            getUserClasses(user.getUserName());
            getUserAssignments(user.getUserName());
        }
        catch(SQLException SQLex){
            SQLex.printStackTrace();
        }
        catch(IncorrectPassword ex){
            JOptionPane.showMessageDialog(this, "Incorrect Password");
        }
    }//GEN-LAST:event_inEnterButtonActionPerformed

    private void inPasswordFieldActionPerformed(ActionEvent evt) {//GEN-FIRST:event_inPasswordFieldActionPerformed
        
    }//GEN-LAST:event_inPasswordFieldActionPerformed

    private void inUsernameFieldActionPerformed(ActionEvent evt) {//GEN-FIRST:event_inUsernameFieldActionPerformed
      
    }//GEN-LAST:event_inUsernameFieldActionPerformed

    private void upRegisterButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_upRegisterButtonActionPerformed
        String username = upUsernameField.getText().trim();
        String password = upPasswordField.getText().trim();
        String name = upNameField.getText();
        
        userExists = false;
        try{
            connection = DriverManager.getConnection(databaseURL);
            
            statement = connection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,  ResultSet.CONCUR_READ_ONLY);
            rs = statement.executeQuery("SELECT * FROM USERPASS");
            while(rs.next()){
                if(rs.getString("USERNAME") == null){
                    break;
                }
                if(rs.getString("USERNAME").equals(username)){
                    userExists = true;
                }
            }
            if(!userExists){
                preparedStatement = connection.prepareStatement("INSERT INTO USERPASS (username, password, name, gpa) VALUES (?, ?, ?, ?)");
                preparedStatement.setString(1, username);
                preparedStatement.setString(2, password);
                preparedStatement.setString(3, name);
                preparedStatement.setDouble(4, 0.0);
                preparedStatement.executeUpdate();
                
                String createClassesTable = "CREATE TABLE \"CLASSES-" + username + "\" (CLASSNAME VARCHAR(256), GRADE DOUBLE, LETTERGRADE VARCHAR(256))";
                statement = connection.createStatement();
                statement.executeUpdate(createClassesTable);
                
                JOptionPane.showMessageDialog(this, "User Successfully Registered");
                signupScreen.setVisible(false);
                signinScreen.setVisible(true);
            }  
            else{
                JOptionPane.showMessageDialog(this, "User Already Exists");
            }
        }
        catch(SQLException SQLex){
            SQLex.printStackTrace();
        }
    }//GEN-LAST:event_upRegisterButtonActionPerformed

    private void signupButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_signupButtonActionPerformed
        createLoginTable();
        welcomeScreen.setVisible(false);
        signupScreen.setVisible(true);
        upNameField.setText("");
        upUsernameField.setText("");
        upPasswordField.setText("");
    }//GEN-LAST:event_signupButtonActionPerformed

    private void upGoBackActionPerformed(ActionEvent evt) {//GEN-FIRST:event_upGoBackActionPerformed
        signupScreen.setVisible(false);
        welcomeScreen.setVisible(true);
        upUsernameField.setText("");
        upPasswordField.setText("");
    }//GEN-LAST:event_upGoBackActionPerformed

    private void inGoBackActionPerformed(ActionEvent evt) {//GEN-FIRST:event_inGoBackActionPerformed
        signinScreen.setVisible(false);
        welcomeScreen.setVisible(true);
    }//GEN-LAST:event_inGoBackActionPerformed

    private void updateButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        try{
            double totalGrade = 0;
            double totalWeight = 0;
            for(int i = 0; i < currentClass.getAssignments().size(); i++){
                double assignmentGrade = currentClass.getAssignments().get(i).getGrade() / 100;
                double assignmentWeight = currentClass.getAssignments().get(i).getWeight();
                totalWeight += assignmentWeight;
                totalGrade += (assignmentGrade * assignmentWeight);
            }
            if(totalWeight != 100){
                totalGrade += (100 - totalWeight);
            }
            currentClass.setGrade(totalGrade);
            currentClass.setLetterGrade(Utils.numberToLetterGrade(totalGrade));
            editAddClassGradeDisplayText.setText(currentClass.getGrade() + " or " + Utils.numberToLetterGrade(currentClass.getGrade()));
        }
        catch(NumberFormatException ex){
            JOptionPane.showMessageDialog(this, "Grade And Weight Must Follow Format: 100.0");
        }
    }//GEN-LAST:event_updateButtonActionPerformed

    private void addButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        String category = categoryInput.getText();
        String grade = gradeInput.getText();
        String weight = weightInput.getText();
        try{
            if(category.equals("") || grade.equals("") || weight.equals("")){
                throw new FillFieldsException();
            }
            double gradeNum = Double.parseDouble(grade);
            double weightNum = Double.parseDouble(weight);
            
            currentAssignment = new Assignment(category, gradeNum, weightNum);
            currentClass.addAssignment(currentAssignment);
            
            DefaultListModel categoryModel = new DefaultListModel();
            DefaultListModel gradeModel = new DefaultListModel();
            DefaultListModel weightModel = new DefaultListModel();
            for(int i = 0; i < categoryList.getModel().getSize(); i++){
                if(categoryList.getModel().getElementAt(i).equals(category)){
                    throw new UniqueNameException();
                }
                categoryModel.addElement(categoryList.getModel().getElementAt(i));
                gradeModel.addElement(gradeList.getModel().getElementAt(i));
                weightModel.addElement(weightList.getModel().getElementAt(i));
            }
            
            categoryModel.addElement(category);
            categoryList.setModel(categoryModel);
            gradeModel.addElement(gradeNum);
            gradeList.setModel(gradeModel);
            weightModel.addElement(weightNum);
            weightList.setModel(weightModel);
        }
        catch(NumberFormatException ex){
            JOptionPane.showMessageDialog(this, "Grade And Weight Must Follow Format: 100.0");
        }
        catch(FillFieldsException ex){
            JOptionPane.showMessageDialog(this, "Please Fill In All Fields Before Adding");
        }
        catch(UniqueNameException ex){
            JOptionPane.showMessageDialog(this, "Make Sure Category Names Are Unique");
        }
        
    }//GEN-LAST:event_addButtonActionPerformed

    private void removeButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        String category = categoryInput.getText();
        String grade = gradeInput.getText();
        String weight = weightInput.getText();
        boolean assignmentExists = false;
        try{
            if(category.equals("")){
                throw new FillFieldsException();
            }
            for(Assignment a: currentClass.getAssignments()){
                if(a.getName().equals(category)){
                    currentClass.removeAssignment(a);
                    assignmentExists = true;
                    break;
                }
            }
            if(!assignmentExists){
                throw new AssignmentDoesNotExistException();
            }
            DefaultListModel categoryModel = new DefaultListModel();
            DefaultListModel gradeModel = new DefaultListModel();
            DefaultListModel weightModel = new DefaultListModel();
            for(int i = 0; i < currentClass.getAssignments().size(); i++){
                categoryModel.addElement(currentClass.getAssignments().get(i).getName());
                gradeModel.addElement(currentClass.getAssignments().get(i).getGrade());
                weightModel.addElement(currentClass.getAssignments().get(i).getWeight());
            }
            categoryList.setModel(categoryModel);
            gradeList.setModel(gradeModel);
            weightList.setModel(weightModel);
            
        }
        catch(FillFieldsException ex){
            JOptionPane.showMessageDialog(this, "To Remove, Specify Category In Text Field");
        }
        catch(AssignmentDoesNotExistException ex){
            JOptionPane.showMessageDialog(this, "Assignment Does Not Exist");
        }
        
    }//GEN-LAST:event_removeButtonActionPerformed

    private void editAddGoBackActionPerformed(ActionEvent evt) {//GEN-FIRST:event_editAddGoBackActionPerformed
        editAddClassScreen.setVisible(false);
        homeScreen.setVisible(true);
        categoryInput.setText("");
        gradeInput.setText("");
        weightInput.setText("");
        double totalGPA = 0;
        for(Classes c: user.getClasses()){
            totalGPA += (Utils.letterGradeToGPA(c.getLetterGrade()));
        }
        user.setGPA(totalGPA / user.getClasses().size());
        gpaLabel.setText("GPA: " + user.getGPA());
    }//GEN-LAST:event_editAddGoBackActionPerformed

    private void signoutButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_signoutButtonActionPerformed
        homeScreen.setVisible(false);
        welcomeScreen.setVisible(true);
        updateTables(user.getUserName());
    }//GEN-LAST:event_signoutButtonActionPerformed

    private void removeClassButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_removeClassButtonActionPerformed

        boolean classExists = false;
        try{
            currentClassName = classNameField.getText();
            if(currentClassName.equals("")){
                throw new FillFieldsException();
            }
            for(Classes c: user.getClasses()){
                if(currentClassName.equals(c.getClassName())){
                    user.removeClass(c);
                    classExists = true;
                    break;
                }
            }
            if(!classExists){
                throw new ClassDoesNotExistException();
            }
            DefaultListModel classModel = new DefaultListModel();
            for(int i = 0; i < user.getClasses().size(); i++){
                classModel.addElement(user.getClasses().get(i).getClassName());
            }
            classList.setModel(classModel);
        }
        catch(ClassDoesNotExistException ex){
            JOptionPane.showMessageDialog(this, "Class Does Not Exist");
        }
        catch(FillFieldsException ex){
            JOptionPane.showMessageDialog(this, "Please Fill Field With Class Name To Be Removed");
        }
    }//GEN-LAST:event_removeClassButtonActionPerformed

    private void addClassButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_addClassButtonActionPerformed
        String className = classNameField.getText().trim();
        try{
            for(Classes c: user.getClasses()){
                if(c.getClassName().equals(className)){
                    throw new UniqueNameException();
                }
            }
            currentClass = new Classes(className, 0, Utils.numberToLetterGrade(0));
            user.addClass(currentClass);
            editAddClassGradeDisplayText.setText(currentClass.getGrade() + " or " + Utils.numberToLetterGrade(currentClass.getGrade()));
            DefaultListModel classModel = new DefaultListModel();
            for(int i = 0; i < classList.getModel().getSize(); i++){
                classModel.addElement(classList.getModel().getElementAt(i));
            }
            classModel.addElement(className);
            classList.setModel(classModel);

            DefaultListModel categoryModel = new DefaultListModel();
            DefaultListModel gradeModel = new DefaultListModel();
            DefaultListModel weightModel = new DefaultListModel();
            categoryList.setModel(categoryModel);
            gradeList.setModel(gradeModel);
            weightList.setModel(weightModel);

            homeScreen.setVisible(false);
            editAddClassScreen.setVisible(true);
        }
        catch(UniqueNameException ex){
            JOptionPane.showMessageDialog(this, "Make Sure Class Names Are Unique");
        }
    }//GEN-LAST:event_addClassButtonActionPerformed

    private void classNameFieldActionPerformed(ActionEvent evt) {//GEN-FIRST:event_classNameFieldActionPerformed

    }//GEN-LAST:event_classNameFieldActionPerformed

    private void editClassButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_editClassButtonActionPerformed
        boolean classExists = false;
        try{
            currentClassName = classNameField.getText();
            if(currentClassName.equals("")){
                throw new FillFieldsException();
            }
            for(Classes c: user.getClasses()){
                if(currentClassName.equals(c.getClassName())){
                    classExists = true;
                    currentClass = c;
                    break;
                }
            }
            if(!classExists){
                throw new ClassDoesNotExistException();
            }
            DefaultListModel categoryModel = new DefaultListModel();
            DefaultListModel gradeModel = new DefaultListModel();
            DefaultListModel weightModel = new DefaultListModel();
            for(Assignment a: currentClass.getAssignments()){
                categoryModel.addElement(a.getName());
                gradeModel.addElement(a.getGrade());
                weightModel.addElement(a.getWeight());
            }
            categoryList.setModel(categoryModel);
            gradeList.setModel(gradeModel);
            weightList.setModel(weightModel);
            homeScreen.setVisible(false);
            editAddClassScreen.setVisible(true);
        }
        catch(ClassDoesNotExistException ex){
            JOptionPane.showMessageDialog(this, "Class Does Not Exist");
        }
        catch(FillFieldsException ex){
            JOptionPane.showMessageDialog(this, "Please Fill Field With Class Name To Be Removed");
        }
    }//GEN-LAST:event_editClassButtonActionPerformed
    
    
    public void getUserClasses(String username){
        String tableName = "CLASSES-" + username;
        try{
            connection = DriverManager.getConnection(databaseURL);
            DatabaseMetaData dbm = connection.getMetaData();
            ResultSet tables = dbm.getTables(null, null, tableName, null);
            if(tables.next()) {
                statement = connection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,  ResultSet.CONCUR_READ_ONLY);
                rs = statement.executeQuery("SELECT * FROM \"" + tableName + "\"");
                while(rs.next()){
                    String className = rs.getString("CLASSNAME");
                    double grade = rs.getDouble("GRADE");
                    String letterGrade = rs.getString("LETTERGRADE");
                    user.addClass(new Classes(className, grade, letterGrade));
                }
            } 
        }
        catch(SQLException ex){
            ex.printStackTrace();
        }
    }
    public void getUserAssignments(String username){
        String classesTable = "CLASSES-" + username;
        try{     
            connection = DriverManager.getConnection(databaseURL);
            DatabaseMetaData dbm = connection.getMetaData();
            ResultSet classesInTable = statement.executeQuery("SELECT * FROM \"" + classesTable + "\"");
            while(classesInTable.next()){
                String className = rs.getString("CLASSNAME");
                String classTable = className + "-" + username;
                ResultSet assignmentsInTable = statement.executeQuery("SELECT * FROM \"" + classTable + "\"");
                int i = 0;
                while(assignmentsInTable.next()){
                    String assignmentName = rs.getString("ASSIGNMENTNAME");
                    double grade = rs.getDouble("GRADE");
                    double weight = rs.getDouble("WEIGHT");
                    user.getClasses().get(i).addAssignment(new Assignment(assignmentName, grade, weight));
                    i++;
                }
            }
        }
        catch(SQLException ex){
            ex.printStackTrace();
        }
    }
    public void createLoginTable(){
        try{
            connection = DriverManager.getConnection(databaseURL);
            DatabaseMetaData dbm = connection.getMetaData();
            ResultSet tables = dbm.getTables(null, null, "USERPASS", null);
            if(!tables.next()){
                String loginTable = "CREATE TABLE UserPass (USERNAME VARCHAR(256) UNIQUE NOT NULL, PASSWORD VARCHAR(256) NOT NULL, NAME VARCHAR(256) NOT NULL, GPA DOUBLE)";
                statement = connection.createStatement();
                statement.execute(loginTable);
            }
        }
        catch(SQLException SQLex){
            SQLex.printStackTrace();
        } 
    }
    public void updateTables(String username){
        String classesTable = "CLASSES-" + username;
        try{
            connection = DriverManager.getConnection(databaseURL);
            rs = statement.executeQuery("SELECT * FROM \"" + classesTable + "\"");
            Set<String> databaseClassesInTable = new HashSet<>();
            
            while(rs.next()){
                String className = rs.getString("CLASSNAME");
                databaseClassesInTable.add(className);
            }
            
            for(String className: databaseClassesInTable){
                if(!user.getClassesNames().contains(className)){
                    String deleteClassesTable = "DELETE FROM \"" + classesTable + "\" WHERE CLASSNAME = ?";
                    preparedStatement = connection.prepareStatement(deleteClassesTable);
                    preparedStatement.setString(1, className);
                    preparedStatement.executeUpdate();
                    String deleteClass = "DROP TABLE \"" + className + "\"-\"" + username + "\"";
                    Statement statement = connection.createStatement();
                    statement.execute(deleteClass);
                }
            }
            
            for(Classes c: user.getClasses()){
                if(!databaseClassesInTable.contains(c.getClassName())){
                    String insertClassesTable = "INSERT INTO \"" + classesTable + "\" (CLASSNAME, GRADE, LETTERGRADE) VALUES (?, ?, ?)";
                    preparedStatement = connection.prepareStatement(insertClassesTable);
                    preparedStatement.setString(1,c.getClassName());
                    preparedStatement.setDouble(2,c.getGrade());
                    preparedStatement.setString(3, c.getLetterGrade());
                    preparedStatement.executeUpdate();
                }
                else{
                    String updateClassesTable = "UPDATE \"" + classesTable + "\" SET GRADE = ?, LETTERGRADE = ? WHERE CLASSNAME = ?";
                    preparedStatement = connection.prepareStatement(updateClassesTable);
                    preparedStatement.setDouble(1,c.getGrade());
                    preparedStatement.setString(2,c.getLetterGrade());
                    preparedStatement.setString(2,c.getClassName());
                    preparedStatement.executeUpdate();
                }
            }
            
            
            Set<String> databaseClassTable = new HashSet<>();
            DatabaseMetaData metaData = connection.getMetaData();
            String productName = metaData.getDatabaseProductName();
            ResultSet tables = metaData.getTables(productName, null, "%", null);
            while(tables.next()){
               String tableName = tables.getString(3);
               databaseClassTable.add(tableName);
            }
            Set<String> defaultTables = new HashSet<>();
            defaultTables.add("SYSALIASES");
            defaultTables.add("SYSCHECKS");
            defaultTables.add("SYSCOLPERMS");
            defaultTables.add("SYSCOLUMNS");
            defaultTables.add("SYSCONGLOMERATES");
            defaultTables.add("SYSCONSTRAINTS");
            defaultTables.add("SYSDEPENDS");
            defaultTables.add("SYSFILES");
            defaultTables.add("SYSFOREIGNKEYS");
            defaultTables.add("SYSKEYS");
            defaultTables.add("SYSPERMS");
            defaultTables.add("SYSROLES");
            defaultTables.add("SYSROUTINEPERMS");
            defaultTables.add("SYSSCHEMAS");
            defaultTables.add("SYSSEQUENCES");
            defaultTables.add("SYSSTATEMENTS");
            defaultTables.add("SYSSTATISTICS");
            defaultTables.add("SYSTABLEPERMS");
            defaultTables.add("SYSTABLES");
            defaultTables.add("SYSTRIGGERS");
            defaultTables.add("SYSUSERS");
            defaultTables.add("SYSVIEWS");
            defaultTables.add("SYSDUMMY1");
            defaultTables.add("USERPASS");
            defaultTables.add("CLASSES-" + username);       
            for(String defaultTableName: defaultTables){
                if(databaseClassTable.contains(defaultTableName)){
                    databaseClassTable.remove(defaultTableName);
                }
            }
            for(String className: user.getClassesNames()){
                String tableName = className + "-" + username;
                if(!databaseClassTable.contains(tableName)){
                    String classTable = "CREATE TABLE \"" + tableName + "\" (ASSIGNMENTNAME VARCHAR(256) UNIQUE NOT NULL, GRADE DOUBLE NOT NULL, WEIGHT DOUBLE)";
                    statement = connection.createStatement();
                    statement.execute(classTable);
                    databaseClassTable.add(tableName);
                }
            }
            for(String tableName: databaseClassTable){
                int index = tableName.indexOf("-");
                String className = tableName.substring(0, index);
                ResultSet classTable = statement.executeQuery("SELECT * FROM \"" + tableName + "\"");
                Set<String> tableAssignments = new HashSet<>();
                while(classTable.next()){
                    String assignmentName = classTable.getString("ASSIGNMENTNAME");
                    tableAssignments.add(assignmentName);
                }   
                Set<String> userAssignments = new HashSet<>();
                for(Assignment a: user.getSpecificClass(className).getAssignments()){
                    if(!tableAssignments.contains(a.getName())){
                        String insertAssignment = "INSERT INTO \"" + tableName + "\" (ASSIGNMENTNAME, GRADE, WEIGHT) VALUES (?, ?, ?)";
                        PreparedStatement insertAssignmentStatement = connection.prepareStatement(insertAssignment);
                        insertAssignmentStatement.setString(1, a.getName());
                        insertAssignmentStatement.setDouble(2, a.getGrade());
                        insertAssignmentStatement.setDouble(3, a.getWeight());
                        insertAssignmentStatement.executeUpdate();
                    }
                    else{
                        String updateAssignment = "UPDATE \"" + tableName + "\" SET GRADE = ?, WEIGHT = ? WHERE ASSIGNMENTNAME = ?";
                        PreparedStatement updateAssignmentStatement = connection.prepareStatement(updateAssignment);
                        updateAssignmentStatement.setDouble(1,a.getGrade());
                        updateAssignmentStatement.setDouble(2,a.getWeight());
                        updateAssignmentStatement.setString(3,a.getName());
                        updateAssignmentStatement.executeUpdate();
                    }
                }
                String updateUser = "UPDATE USERPASS SET GPA = ? WHERE USERNAME = ?";
                PreparedStatement updateUserGPA = connection.prepareStatement(updateUser);
                updateUserGPA.setDouble(1,user.getGPA());
                updateUserGPA.setString(2,user.getUserName());
                updateUserGPA.executeUpdate();
                
            }
            
        }
        catch(SQLException ex){
            
        }
    }
    public void connect(){
        try{
            connection = DriverManager.getConnection(databaseURL);
            System.out.println("Successfully connected to database");
        }
        catch(SQLException SQLex){
            SQLex.printStackTrace();
        } 
    }
    /**
     * 
     */
    public void start() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }
}
